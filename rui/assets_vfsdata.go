// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package rui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 10, 29, 12, 31, 32, 664092639, time.UTC),
		},
		"/.DS_Store": &vfsgen۰CompressedFileInfo{
			name:             ".DS_Store",
			modTime:          time.Date(2018, 10, 29, 12, 34, 13, 436320697, time.UTC),
			uncompressedSize: 6148,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\x31\x4e\x85\x40\x10\x86\xff\x59\x28\xd6\xd8\x6c\x69\xb9\x57\xf0\x06\x1b\x82\x27\xf0\x02\x2a\xd8\x61\x30\x41\x7b\x2a\xcf\xe5\xd1\x0c\xee\x6f\xc0\x00\x8d\x89\x79\xbc\x97\xff\x4b\xc8\x47\xb2\x33\x03\xa1\xd8\x9d\x01\x80\x55\xef\xed\x2d\x10\x00\x78\x64\xe3\x03\x9b\x78\x5e\x2b\xdc\xc2\x36\xd5\x68\xba\xa7\xbe\xef\x0c\xc0\xd5\x76\xa9\xed\x1a\x05\x1a\x0c\x18\xda\x61\x99\xff\x86\x67\xbc\xe0\x15\x1d\x1e\xbf\xef\x7f\x2d\x0b\x21\x84\x10\xe2\xaf\xf0\x24\xf5\xd7\xa7\x7e\x11\x21\xc4\xe1\x98\xf6\x87\x48\x27\x7a\xcc\x36\xae\x3b\xba\x5c\xe4\x04\x3a\xd2\x89\x1e\xb3\x8d\x71\x8e\x2e\x69\x4f\x07\x3a\xd2\x89\x1e\xb3\xb9\x69\x19\x87\x0f\xe3\x93\x8d\x13\x8a\x05\x3a\xd2\xe9\x7f\xbe\x8d\x10\xe7\x4e\x91\x15\xa6\xf3\xff\x6e\x7f\xfe\x17\x42\x5c\x30\x56\xd6\xf7\x75\x35\x0f\x04\x2b\x1c\x1b\x81\x07\xc6\x7c\xfe\x24\xee\x34\x02\x2e\xff\x30\xbc\xc1\x1c\xa7\x66\x40\x88\x03\xf1\x15\x00\x00\xff\xff\x1d\x78\x16\x66\x04\x18\x00\x00"),
		},
		"/css": &vfsgen۰DirInfo{
			name:    "css",
			modTime: time.Date(2018, 10, 7, 6, 56, 2, 0, time.UTC),
		},
		"/css/reflectui.css": &vfsgen۰CompressedFileInfo{
			name:             "reflectui.css",
			modTime:          time.Date(2018, 10, 17, 8, 43, 32, 6939888, time.UTC),
			uncompressedSize: 429,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x50\xcd\x0a\xc2\x30\x0c\x3e\xaf\x4f\x91\xa3\x8e\xd5\x4d\x8f\x1b\xf8\x12\x7a\x1f\xd5\x46\x2d\xd4\x4e\xd2\x74\x22\x63\xef\x2e\x2b\xc2\x84\x0d\x99\xc9\x29\xdf\x4f\xf8\xf8\xf2\x54\x2e\x1e\x38\xb0\x86\xdf\x92\x34\x07\xb1\xa1\x60\x6a\xcf\xba\xa6\xa6\xe1\x6c\x3c\x3d\x53\x38\x33\x74\x22\xb9\x2b\xba\x1a\x57\xc2\xb6\x80\x61\x77\x45\x25\x7a\x31\x0a\x35\x5e\x54\xb0\x0c\xda\xb4\xd0\xcd\x32\x56\x9d\xd0\x76\x22\x79\x1a\xcd\xb7\x12\x5a\x45\x2b\x29\x07\x41\x24\xea\x08\xaf\xe7\x9f\x1a\xf7\x08\x31\xc4\xc4\x1b\x99\x6f\xef\x5f\xdd\x1c\x09\x71\x69\x39\x4c\x88\x9f\x3a\xb2\x09\x02\x7b\x08\x76\x08\x68\x8d\x67\xe9\xf9\x65\xb1\x74\x8d\xc3\x4a\xf4\xef\x00\x00\x00\xff\xff\xab\x84\x55\xf8\xad\x01\x00\x00"),
		},
		"/templates": &vfsgen۰DirInfo{
			name:    "templates",
			modTime: time.Date(2018, 10, 7, 7, 10, 25, 0, time.UTC),
		},
		"/templates/rui_internal.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "rui_internal.tmpl",
			modTime:          time.Date(2018, 10, 11, 15, 50, 48, 161733270, time.UTC),
			uncompressedSize: 649,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x3f\x6b\xc3\x30\x10\xc5\x67\xfb\x53\x5c\x93\x1c\xb4\xd0\xc4\xbb\x51\x0c\x1d\x3a\x84\x06\x0f\xb5\xe9\x1a\xe4\xea\xd2\x0a\x14\x35\x38\x56\x70\x30\xfa\xee\x45\x7f\x4c\x63\xaf\xf5\xe2\xc7\xfd\xde\x3d\x49\x77\xec\x61\xbd\x86\x5d\x59\xbf\xbe\x97\x2f\x7b\xa8\xe9\x74\x56\xbc\xa3\x0b\xac\xff\xf7\x15\x29\x0e\x20\xe8\x28\x35\xc1\xa2\x35\xf2\x20\x75\x47\xad\xe6\xea\x20\xe8\xc8\x8d\xea\x16\x16\x53\x26\xe4\xb5\x48\x01\x98\x51\x45\x9a\x30\x25\x8b\x92\x9f\x28\x07\x1c\x60\xe3\x14\x58\x64\x99\x92\x91\xed\x79\x43\x2a\x40\x2f\xa7\xb4\xbe\x9d\x63\xa7\x53\x53\xf6\x26\xb5\x08\xcc\xa9\x29\xab\xba\x9b\x8a\x8d\x5e\xce\xe8\xe7\x37\x8d\x37\x0a\x7a\xca\x77\x31\x77\x27\xe6\xf5\x7e\x04\xfd\xec\x9e\x71\xc2\x7f\x2f\xbd\xaf\x8c\xde\x24\x98\x3f\xb8\x32\xd1\xe5\xe5\x1d\xc6\x01\x56\x8a\x34\xe4\x5b\x70\xbf\x4d\x65\x9a\xf2\x47\xd0\x05\x2c\x86\xde\x25\x54\xa6\xd1\xae\xe4\x03\xbc\x79\xd2\xde\x72\xfd\x45\xb0\x92\x5a\x50\xff\xbc\xba\xfa\xfc\x7c\x3b\x4b\x0a\x53\x08\x41\xf0\xb8\xc4\x21\xf8\x2d\x42\x06\x38\xb8\x50\x8b\x4f\x79\x7c\x9f\x4f\x35\xd2\x7b\xe3\x34\x37\x60\x31\x1c\x47\x5a\x58\x4c\x12\xb7\xee\xcc\xed\x9b\x65\x7e\xfb\x23\x49\x7f\x03\x00\x00\xff\xff\xe8\xd3\xd4\xf0\x89\x02\x00\x00"),
		},
		"/templates/rui_std.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "rui_std.tmpl",
			modTime:          time.Date(2018, 10, 16, 7, 23, 40, 104861259, time.UTC),
			uncompressedSize: 1048,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x92\xcf\x6a\xc3\x30\x0c\xc6\xcf\xf1\x53\x68\x61\x3e\xd6\xbd\x97\xd4\xa7\x32\x18\x8c\x1e\xd6\xb2\x6b\x71\x62\x75\x33\xb8\x49\xf0\x9f\x42\x08\x79\xf7\x61\xc7\x5d\x09\x6b\x4a\xa1\x39\x39\x9f\x3e\x59\x3f\x4b\x2a\x5e\x16\x0b\xd8\xed\x37\xb0\xc7\x53\xab\x85\x43\x0b\x8b\xe7\x3e\x4e\x08\xed\x41\xe2\x51\xd5\x08\xb9\xf1\xea\x60\x9d\x3c\x98\xa6\x71\xf9\x40\x49\x21\xd5\x19\x2a\x2d\xac\x5d\x4f\x63\x9c\x64\xb4\x87\x57\xeb\x3a\x8d\xb0\x5a\x03\xdb\xc5\xd3\x40\xa3\x6e\x44\xfd\x8d\xc0\x76\xbe\xdc\x36\x12\x6d\x94\xa3\xee\x55\x1d\x85\x94\x38\x75\xd0\x1e\xb0\x96\x03\xcd\x48\xb1\x94\xea\xcc\xc9\x45\xb8\x89\x68\x9d\xf1\x55\x84\x9c\x01\xb9\xc5\x9e\x92\x38\xc9\x8a\x92\xd3\x1e\xd8\x56\x9c\x82\xb9\x58\x96\x7c\x15\xfe\xf7\x5d\x7b\x7d\xc5\x1d\xda\x8c\x00\x3c\x42\x79\x12\x6d\x42\x74\x69\x62\xff\x5e\x00\x0c\x46\xc7\x9d\xb7\x6a\x55\xe1\xdc\x3c\xc6\x20\x9f\x22\xa7\x36\x4c\x91\x1f\x01\x16\xc6\x88\x6e\xae\xd4\x18\x8c\x37\x3c\x5f\x49\xe2\x51\x78\x3d\xbb\x66\x97\x70\x98\x95\x6d\x45\xcd\x49\x06\x00\x90\x15\x5a\x94\xa8\x67\xdd\xb4\x67\x1f\xc1\x10\x66\x1a\x9d\x7f\x79\xaa\x6e\xbd\x9b\xcb\x03\x25\xd7\x39\xed\xd9\xbb\x1c\x68\x0e\xad\x16\x15\xfe\x34\x5a\xa2\x89\x6a\xd8\x8a\xa0\x9f\x85\xf6\x18\x14\x60\x5f\xe1\x08\x41\x34\x28\x64\x53\xeb\x0e\x38\x09\x65\x96\x23\xec\x23\x1d\xf8\xf4\x2a\x36\x6f\x23\x9c\x48\x5b\x92\xda\x0a\xec\x4d\xa1\x96\x76\x6c\x6e\x2a\x76\xd1\x82\x3d\x76\xf9\x7a\xf9\x6f\x00\x00\x00\xff\xff\x99\x85\xc7\x13\x18\x04\x00\x00"),
		},
		"/templates/rui_table.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "rui_table.tmpl",
			modTime:          time.Date(2018, 9, 28, 11, 59, 29, 0, time.UTC),
			uncompressedSize: 3460,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\xdf\x8f\xa3\x36\x10\xc7\x9f\xe1\xaf\x98\xba\xe2\xad\x84\xe6\xc7\xbe\x54\x80\x74\x52\x55\xb5\xea\xdd\xe9\xd4\x5d\xf5\x75\x65\x60\x20\xd6\x19\x4c\x8d\xd9\x6d\x14\xe5\x7f\xaf\xc6\xfc\x08\x6c\x2e\x7b\xb9\x44\x57\xed\xbe\x60\xaf\xc7\xe3\xcf\x7c\x67\xc6\x8e\xb7\x87\x0c\x73\x51\x21\x30\xdd\x8a\x47\xc3\x13\x89\x8f\x5a\x29\xc3\x0e\x9e\x1b\x66\xe2\x29\x76\xc3\x5c\xe9\x12\x44\x16\x31\x6f\xbf\xf8\xc8\x4b\x3c\x78\x2c\x76\xc3\x1f\x7c\x1f\x5c\x9e\x1a\xa1\xaa\x88\x05\xdd\xe0\xb1\xe6\x05\x2e\xea\x6d\xcd\xa0\x44\xb3\x55\x59\xc4\x0a\x34\x0c\x60\xb0\xf3\x60\x0f\x8b\x77\x76\x02\x07\xf0\x8e\x66\x76\xe1\x83\x9d\xd8\x05\xd7\xf7\x63\xd7\xf1\xf6\xa0\x79\x55\x20\x2c\xee\xdb\xe4\xa3\xca\xb0\x81\x83\xe7\x3a\x67\xff\x6f\x17\x5a\x51\xa9\x0c\x81\xd9\x58\x18\x2c\xe0\xe0\x39\xdd\x1e\xac\xb2\x83\xe7\x38\xee\x38\x76\x9d\x30\x69\x8d\x51\x15\x98\x5d\x8d\x11\x6b\xda\xa4\x14\x86\x41\x2a\x79\xd3\x44\x2c\x31\x15\x24\xa6\xf2\x6b\x2d\x4a\xae\x77\x2c\x1e\x05\x08\x83\x6e\x5f\xec\x38\x4e\x2f\x05\xa9\x14\x31\x06\xf4\x3d\x1b\x2e\x2d\xbe\x1a\x72\x18\x90\x09\x7d\xad\xf6\x23\xa8\xfb\xc5\x44\x65\x98\xf3\x56\xda\x5c\x39\x94\xac\x01\x9c\x7c\xf8\x85\x56\x6d\x0d\x5a\x3d\xb3\xd8\x05\x00\x70\x42\xc9\x13\x94\x83\x4d\xaa\xa4\xdf\x94\xfe\x0a\x68\x60\x37\xd8\x65\xcb\x48\xa9\x86\xc5\x1f\x19\x50\xaa\x69\xf8\x9e\x96\x28\x6c\x6b\x13\xbb\xce\xec\xb8\xde\xd5\xf2\x67\x16\xbb\x4e\x77\x94\xa8\xea\xd6\xc0\x8c\x27\x55\x95\xd1\x4a\xb2\xbe\x94\x06\xff\x50\x4b\x9e\xe2\x56\xc9\x0c\x75\xc4\x7e\xed\x22\xfa\x05\xc8\xe0\x4f\x51\x91\xc9\x4f\x76\xf2\xb0\xab\xf1\x38\xc1\xb2\x96\xdc\x20\x65\xc3\x3a\x79\xe2\xb2\xc5\xce\xed\xdf\x34\xb4\xe4\x84\xd9\xe9\x48\x48\x17\x29\x9a\x28\x25\xbf\x9b\x9c\x37\xaa\xd9\xd5\x68\xba\xc5\xf4\x73\xa2\xfe\x65\x17\x89\xdb\xeb\x62\x74\x8b\x0c\xbc\xbd\xc8\x8f\xfa\x58\x47\x98\x79\x7b\xab\x47\x4c\x7d\xf1\xcd\x72\x35\x46\xb7\xe9\xf7\xab\xbf\x99\x60\x70\x81\x62\x2f\xc2\x8f\x87\x3b\x61\x7e\x59\x74\x77\xc5\x6b\x97\xc5\xec\xb6\xe8\xb5\xa0\x56\xbf\x58\x98\xdf\x84\xc4\x4f\xdc\x6c\xdf\x76\x2d\xe5\x82\x82\xfe\x86\x3a\x9a\xf7\xd7\x55\x25\xf3\xc0\x8b\xf7\xa2\xf9\x9f\x6a\xe6\x28\x8c\x33\x28\xf3\x22\xb0\xde\x73\xc5\x9f\x12\xae\x67\x72\xcd\x95\x3c\x0d\xc0\x9a\xcc\x6c\xfa\x95\xdf\x91\x67\xa8\xfb\xf5\xf3\x06\x0f\xc2\x48\x7c\xc1\x6a\x05\xec\xb6\xcd\x1e\xa6\x6e\x32\x7d\x98\x48\x7d\xc7\x26\xc0\x5a\x73\xd8\x6a\xcc\x23\xf6\x23\x8b\x43\x51\x16\xd0\xe8\x94\x5e\xe5\xba\x0e\x44\x59\x04\xb5\x6c\x1b\xff\x79\x51\x57\x05\x03\x2e\x4d\xc4\x58\x1c\x06\x7c\x38\x69\xf2\x96\x0d\x1e\x27\x24\x61\x2b\x7b\xc3\x63\x23\x0d\x25\xd0\x3b\x90\xc2\x5a\xc0\xe4\x6f\x04\x22\x9e\x31\xc5\x1c\x72\xee\x27\x5c\x37\xf4\x95\x05\x51\x08\x2b\x80\xed\x6d\x3e\xf3\x12\x06\xd6\xad\xad\x82\xa1\x1f\x87\x23\xc3\xa0\x87\xea\x38\xe1\xf5\x32\xfc\x72\x1d\xde\x1b\xae\xff\xe2\x46\x54\xc5\xdb\x2e\x45\xe8\xde\xb1\x5c\xa0\xcc\x1a\x34\xa7\xf5\x38\x09\xa4\xd3\x64\xda\xe1\x9a\x67\x42\x0d\xdd\x6c\x91\xfc\x3b\x06\x15\x2f\x71\xfa\x73\x6e\x68\xef\x3b\x7a\x23\x40\xe4\x80\xff\x0c\x49\xbe\x83\x83\x07\xfd\x53\x01\x63\x16\x20\x88\xa7\x72\x40\x04\x2c\x6f\xe5\x31\xfa\xf1\x24\x43\x45\x1e\xb1\x77\xcf\xd8\xa8\x12\xc1\x87\x3b\x68\x0c\xd7\x0d\xa5\x7e\xbc\xb1\xbe\x8a\xbc\x39\x8f\xbc\x39\x45\xde\xdc\x80\xbc\x19\x91\x3f\x69\x34\x66\x07\x85\x52\x19\xf8\xb0\xb9\x06\x7b\x7d\x1e\x7b\x7d\x8a\xbd\xbe\x01\x7b\x3d\x62\x7f\xc0\x2d\xf8\xb0\xbe\x06\x77\x75\x1e\x77\x75\x8a\xbb\xba\x01\x77\x35\xe2\xd2\x4f\x3c\x0e\x09\x27\x8d\x57\xd7\x40\x2f\xcf\x43\x2f\x4f\xa1\x97\x37\x40\x2f\x47\xe8\xfb\x36\xfd\xdc\x40\x22\x0a\x30\xc2\x16\xf5\xd2\x92\xcf\xc0\xc3\x60\xe8\xd8\xaf\x3e\x93\xff\x05\x00\x00\xff\xff\xa0\x7a\x0e\x3f\x84\x0d\x00\x00"),
		},
		"/templates/rui_tree.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "rui_tree.tmpl",
			modTime:          time.Date(2018, 10, 17, 7, 36, 33, 308732629, time.UTC),
			uncompressedSize: 555,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\xc1\x6a\xc3\x30\x10\x44\xcf\xd6\x57\x4c\x03\x3a\xb5\x71\xee\x45\xd5\x27\xe4\x92\xd2\x4b\x08\x41\xb1\xd6\x20\x50\x64\xa3\x95\x5a\x82\xf1\xbf\x17\xb9\x8e\x09\x6d\x7a\xc8\x9e\x3c\x33\x66\xf6\xad\xd4\xd3\x7a\x8d\x14\x89\x8e\xb1\xeb\x12\xd6\x1a\x9c\xec\xfc\xfd\xc8\x88\xb6\x8b\x5f\x26\x5a\x24\x3a\xf7\xde\x24\xe2\x17\x9c\xa8\x31\x99\x69\xb1\x10\x89\x3b\xff\x49\xe8\x23\x35\x64\x29\x34\x84\xd6\x05\xcb\xb0\xd4\x9a\xec\x13\x5a\x17\x39\x41\x3c\xb4\xf9\xff\xd1\x42\x0e\xa5\xda\x05\xc2\x2a\x66\x77\x5c\xee\x5c\x8d\xb2\x64\x0b\xd8\x94\x5e\x0f\x5f\xa1\xc6\x4f\x4e\xc1\x8e\x52\x88\xbb\x35\x9c\x62\x6e\xa6\x22\xe5\x1d\x1a\x6f\x98\xdf\xfe\xa4\x5a\x54\x8a\x7b\x13\xf4\xfe\xf9\x00\x39\xa0\xde\x9a\x33\x61\x94\x50\x9b\xc9\x16\x95\xca\x5e\x8b\x4a\x0e\x88\xd9\x85\xce\x12\xa3\xde\xa5\x8b\x27\xd4\xbb\x7c\xda\x4e\xc6\x28\x2b\x01\x00\x6a\x53\xfe\x55\x1b\xef\xf4\x0d\xdc\x3d\xb6\xf9\x39\x67\xb8\x05\xe2\x16\x60\x5f\xc4\xfb\xa5\x2f\xe2\x80\xd7\x09\xee\xc3\xf8\x5c\xf4\x15\xee\xd7\xaa\xef\x00\x00\x00\xff\xff\x6d\xd4\x93\x0e\x2b\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/.DS_Store"].(os.FileInfo),
		fs["/css"].(os.FileInfo),
		fs["/templates"].(os.FileInfo),
	}
	fs["/css"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/css/reflectui.css"].(os.FileInfo),
	}
	fs["/templates"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/templates/rui_internal.tmpl"].(os.FileInfo),
		fs["/templates/rui_std.tmpl"].(os.FileInfo),
		fs["/templates/rui_table.tmpl"].(os.FileInfo),
		fs["/templates/rui_tree.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
